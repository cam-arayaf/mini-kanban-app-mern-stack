{"version":3,"sources":["assets/img/logo.png","components/Header/index.js","constants/index.js","components/Boards/Board/Notes/Note/index.js","components/Boards/Board/Notes/index.js","components/Boards/Board/index.js","components/Boards/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","AppBar","position","Toolbar","src","logo","alt","width","heigth","displayName","api_url","IconBtn","onMouseDown","icon","IconButton","size","IdeaAndDoneNote","_id","type","eventHandler","xs","ToDoAndInProgressNote","Buttons","Note","text","Card","CardContent","TextField","id","multiline","rowsMax","variant","defaultValue","onBlur","CardActions","Notes","class_name","notes","filter","note","map","key","Board","title","sm","md","className","Container","maxWidth","Boards","state","boards","getBoards","axios","get","then","resp","setState","data","catch","error","console","log","getNotes","postNote","post","deleteNote","delete","putTextNote","put","putPreviousNextNote","event","addNote","textField0","document","querySelector","value","trim","saveNote","textField","previousText","find","this","board","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d857f8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ba1a9cb5.png\";","import React from 'react';\nimport { AppBar, Toolbar } from '@material-ui/core';\nimport logo from './../../assets/img/logo.png';\n\nconst Header = () => (\n    <AppBar position=\"sticky\">\n        <Toolbar>\n            <img src={ logo } alt=\"logo\" width=\"32\" heigth=\"32\"></img>\n            &nbsp;&nbsp;\n            <h2>Mini Kanban App</h2>\n        </Toolbar>\n    </AppBar>\n);\n\nHeader.displayName = \"Header\";\n\nexport default Header;","export const api_url = 'https://us-central1-mini-kanban-app-efa59.cloudfunctions.net/api';","import React, { Fragment } from 'react';\nimport { Grid, Row, Col } from 'react-flexbox-grid'\nimport { Card, CardActions, CardContent, IconButton, TextField } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport PropTypes from 'prop-types';\n\nconst IconBtn = ({ onMouseDown, icon }) => (\n    <IconButton onMouseDown={ onMouseDown } size=\"small\">\n        { icon }\n    </IconButton>\n);\n\nconst IdeaAndDoneNote = ({ _id, type, eventHandler }) => (\n    <Fragment>\n        <Col xs={ 6 }>\n            <IconBtn\n                onMouseDown={ type === 'ideas' ? () => eventHandler('remove', _id) :\n                    () => eventHandler('previous', _id)\n                }\n                icon={ type === 'ideas' ? <DeleteIcon /> : <SkipPreviousIcon /> }\n            />\n        </Col>\n        <Col xs={ 6 }>\n            <IconBtn\n                onMouseDown={ type === 'ideas' ? () => eventHandler('next', _id) :\n                    () => eventHandler('remove', _id)\n                }\n                icon={ type === 'ideas' ? <SkipNextIcon /> : <DeleteIcon /> }\n            />\n        </Col>\n    </Fragment>\n);\n\nconst ToDoAndInProgressNote = ({ _id, eventHandler }) => (\n    <Fragment>\n        <Col xs={ 4 }>\n            <IconBtn\n                onMouseDown={ () => eventHandler('previous', _id) }\n                icon={ <SkipPreviousIcon /> }\n            />\n        </Col>\n        <Col xs={ 4 }>\n            <IconBtn\n                onMouseDown={ () => eventHandler('remove', _id) }\n                icon={ <DeleteIcon /> }\n            />\n        </Col>\n        <Col xs={ 4 }>\n            <IconBtn\n                onMouseDown={ () => eventHandler('next', _id) }\n                icon={ <SkipNextIcon /> }\n            />\n        </Col>\n    </Fragment>\n);\n\nconst Buttons = ({ _id, type, eventHandler }) => (\n    type === 'ideas' || type === 'done' ?\n        <IdeaAndDoneNote _id={ _id } type={ type } eventHandler={ eventHandler } /> :\n        <ToDoAndInProgressNote _id={ _id } eventHandler={ eventHandler } />\n);\n\nconst Note = ({ _id, type, text, eventHandler }) => (\n    <Card>\n        <CardContent>\n            <TextField\n                id={ `textField${ _id ? _id : 'Add' }` }\n                multiline\n                rowsMax=\"4\"\n                variant=\"outlined\"\n                defaultValue={ text }\n                onBlur={ () => eventHandler(_id ? 'save' : 'add', _id) }\n            />\n        </CardContent>\n        <CardActions>\n            <Grid>\n                <Row>\n                    {\n                        _id && <Buttons _id={ _id } type={ type } eventHandler={ eventHandler } />\n                    }\n                </Row>\n            </Grid>\n        </CardActions>\n    </Card>\n);\n\nIconBtn.propTypes = {\n    onMouseDown: PropTypes.func.isRequired,\n    icon: PropTypes.element.isRequired\n}\n\nIdeaAndDoneNote.propTypes = {\n    _id: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    eventHandler: PropTypes.func.isRequired\n}\n\nToDoAndInProgressNote.propTypes = {\n    _id: PropTypes.string.isRequired,\n    eventHandler: PropTypes.func.isRequired\n}\n\nButtons.propTypes = {\n    _id: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    eventHandler: PropTypes.func.isRequired\n}\n\nNote.propTypes = {\n    _id: PropTypes.string,\n    type: PropTypes.string,\n    text: PropTypes.string,\n    eventHandler: PropTypes.func.isRequired\n}\n\nNote.displayName = \"Note\";\n\nexport default Note;","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Note from './Note';\n\nconst Notes = ({ class_name, notes, eventHandler }) => (\n    <Fragment>\n        { class_name === 'ideas' && <Note eventHandler={ eventHandler } /> }\n        {\n            notes.filter(note => note.type === class_name).map(note => {\n                const { _id, type, text } = note;\n                return (\n                    <Note\n                        key={ _id }\n                        _id={ _id }\n                        type={ type }\n                        text={ text }\n                        eventHandler={ eventHandler }\n                    />\n                );\n            })\n        }\n    </Fragment>\n);\n\nNotes.propTypes = {\n    class_name: PropTypes.string.isRequired,\n    notes: PropTypes.array.isRequired,\n    eventHandler: PropTypes.func.isRequired\n}\n\nNotes.displayName = \"Notes\";\n\nexport default Notes;","import React from 'react';\nimport { Col } from 'react-flexbox-grid'\nimport { Container } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport Notes from './Notes';\n\nconst Board = ({ class_name, title, notes, eventHandler }) => (\n    <Col xs={ 12 } sm={ 6 } md={ 3 } className={ class_name }>\n        <h3>{ title }</h3>\n        <Container maxWidth=\"sm\">\n            {\n                <Notes\n                    class_name={ class_name }\n                    notes={ notes }\n                    eventHandler={ eventHandler }\n                />\n            }\n        </Container>\n    </Col>\n);\n\nBoard.propTypes = {\n    class_name: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    notes: PropTypes.array.isRequired,\n    eventHandler: PropTypes.func.isRequired\n}\n\nBoard.displayName = \"Board\";\n\nexport default Board;","import React, { Component } from 'react';\nimport { Grid, Row } from 'react-flexbox-grid';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { api_url } from './../../constants';\nimport Board from './Board';\n\nclass Boards extends Component {\n    state = { boards: [], notes: [] };\n\n    componentDidMount() {\n        this.getBoards();\n        this.getNotes();\n    }\n\n    getBoards = () => axios.get(`${ api_url }/boards`)\n        .then(resp => this.setState({ boards: resp.data.boards }))\n        .catch(error => console.log(error));\n\n    getNotes = () => axios.get(`${ api_url }/notes`)\n        .then(resp => this.setState({ notes: resp.data.notes }))\n        .catch(error => console.log(error));\n\n    postNote = text => axios.post(`${ api_url }/notes`, { text })\n        .then(() => this.getNotes())\n        .catch(error => console.log(error));\n\n    deleteNote = _id => axios.delete(`${ api_url }/notes/${ _id }`)\n        .then(() => this.getNotes())\n        .catch(error => console.log(error));\n\n    putTextNote = (_id, text) => axios.put(`${ api_url }/notes/text/${ _id }`, { text })\n        .then(() => this.getNotes())\n        .catch(error => console.log(error));\n    \n    putPreviousNextNote = (_id, event) => axios.put(`${ api_url }/notes/${ event }/${ _id }`)\n        .then(() => this.getNotes())\n        .catch(error => console.log(error));\n\n    addNote = () => {\n        const textField0 = document.querySelector('#textFieldAdd');\n        const text = textField0.value.trim();\n        if (!text) return textField0.value = '';\n        textField0.value = '';\n        this.postNote(text);\n    }\n\n    saveNote = _id => {\n        const textField = document.querySelector(`#textField${ _id }`);\n        const text = textField.value.trim();\n        const previousText = this.state.notes.find(note => note._id === _id).text;\n        if (!text || previousText === text) return textField.value = previousText;\n        textField.value = text;\n        this.putTextNote(_id, text);\n    }\n\n    eventHandler = (event, _id) => {\n        switch (event) {\n            case 'add':\n                return this.addNote();\n            case 'remove':\n                return this.deleteNote(_id);\n            case 'previous': case 'next':\n                return this.putPreviousNextNote(_id, event);\n            case 'save':\n                return this.saveNote(_id);\n            default:\n                return;\n        }\n    }\n\n    render() {\n        const { boards, notes } = this.state;\n        return (\n            <Grid>\n                <Row>\n                    {\n                        boards.map(board => {\n                            const { _id, class_name, title } = board;\n                            return (\n                                <Board\n                                    key={ _id }\n                                    class_name={ class_name }\n                                    title={ title }\n                                    notes={ notes }\n                                    eventHandler={ this.eventHandler }\n                                />\n                            );\n                        })\n                    }\n                </Row>\n            </Grid>\n        );\n    }\n}\n\nBoards.propTypes = {\n    boards: PropTypes.array,\n    notes: PropTypes.array\n}\n\nBoards.displayName = \"Boards\";\n\nexport default Boards;","import React, { Fragment } from 'react';\nimport Header from './components/Header';\nimport Boards from './components/Boards';\n\nconst App = () => (\n    <Fragment>\n      \t<Header />\n      \t<Boards />\n    </Fragment>\n);\n\nApp.displayName = \"App\";\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/css/styles.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}