{"version":3,"sources":["assets/img/logo.png","components/Header/index.js","constants/index.js","components/Boards/Board/Notes/Note/index.js","components/Boards/Board/Notes/index.js","components/Boards/Board/index.js","components/Boards/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","AppBar","position","Toolbar","src","logo","alt","width","heigth","displayName","api_url","IconBtn","onMouseDown","icon","IconButton","size","AddIdea","eventHandler","xs","IdeaAndDoneNote","_id","type","ToDoAndInProgressNote","sm","Buttons","Note","text","Card","CardContent","TextField","id","multiline","rowsMax","variant","defaultValue","CardActions","Notes","class_name","notes","filter","note","map","key","Board","title","md","className","Container","maxWidth","Boards","state","boards","getBoards","axios","get","then","resp","setState","data","catch","error","console","log","getNotes","postNote","post","deleteNote","delete","putTextNote","put","putSkipNote","skip","event","clickAddIcon","clickDeleteIcon","clickSkipPreviousNextIcon","clickSaveIcon","textField0","document","querySelector","value","trim","textField","this","board","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.964f9202.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ba1a9cb5.png\";","import React from 'react';\nimport { AppBar, Toolbar } from '@material-ui/core';\nimport logo from './../../assets/img/logo.png';\n\nconst Header = () => (\n    <AppBar position=\"sticky\">\n        <Toolbar>\n            <img src={ logo } alt=\"logo\" width=\"32\" heigth=\"32\"></img>\n            &nbsp;&nbsp;\n            <h2>Mini Kanban App</h2>\n        </Toolbar>\n    </AppBar>\n);\n\nHeader.displayName = \"Header\";\n\nexport default Header;","export const api_url = 'https://us-central1-mini-kanban-app-efa59.cloudfunctions.net/createApi';","import React, { Fragment } from 'react';\nimport { Grid, Row, Col } from 'react-flexbox-grid'\nimport { Card, CardActions, CardContent, IconButton, TextField } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport SaveIcon from '@material-ui/icons/Save';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport PropTypes from 'prop-types';\n\nconst IconBtn = ({ onMouseDown, icon }) => (\n    <IconButton onMouseDown={ onMouseDown } size=\"small\">\n        { icon }\n    </IconButton>\n);\n\nconst AddIdea = ({ eventHandler }) => (\n    <Col xs={ 12 }>\n        <IconBtn onMouseDown={ () => eventHandler('clickAddIcon') } icon={ <AddIcon /> } />\n    </Col>\n);\n\nconst IdeaAndDoneNote = ({ _id, type, eventHandler }) => (\n    <Fragment>\n        <Col xs={ 4 }>\n            <IconBtn\n                onMouseDown={ type === 'ideas' ? () => eventHandler('clickSaveIcon', _id) :\n                    () => eventHandler('clickSkipPreviousIcon', _id)\n                }\n                icon={ type === 'ideas' ? <SaveIcon /> : <SkipPreviousIcon /> }\n            />\n        </Col>\n        <Col xs={ 4 }>\n            <IconBtn\n                onMouseDown={ type === 'ideas' ? () => eventHandler('clickDeleteIcon', _id) :\n                    () => eventHandler('clickSaveIcon', _id)\n                }\n                icon={ type === 'ideas' ? <DeleteIcon /> : <SaveIcon /> }\n            />\n        </Col>\n        <Col xs={ 4 }>\n            <IconBtn\n                onMouseDown={ type === 'ideas' ? () => eventHandler('clickSkipNextIcon', _id) :\n                    () => eventHandler('clickDeleteIcon', _id)\n                }\n                icon={ type === 'ideas' ? <SkipNextIcon /> : <DeleteIcon /> }\n            />\n        </Col>\n    </Fragment>\n);\n\nconst ToDoAndInProgressNote = ({ _id, eventHandler }) => (\n    <Fragment>\n        <Col xs={ 6 } sm={ 3 }>\n            <IconBtn\n                onMouseDown={ () => eventHandler('clickSkipPreviousIcon', _id) }\n                icon={ <SkipPreviousIcon /> }\n            />\n        </Col>\n        <Col xs={ 6 } sm={ 3 }>\n            <IconBtn\n                onMouseDown={ () => eventHandler('clickSaveIcon', _id) }\n                icon={ <SaveIcon /> }\n            />\n        </Col>\n        <Col xs={ 6 } sm={ 3 }>\n            <IconBtn\n                onMouseDown={ () => eventHandler('clickDeleteIcon', _id) }\n                icon={ <DeleteIcon /> }\n            />\n        </Col>\n        <Col xs={ 6 } sm={ 3 }>\n            <IconBtn\n                onMouseDown={ () => eventHandler('clickSkipNextIcon', _id) }\n                icon={ <SkipNextIcon /> }\n            />\n        </Col>\n    </Fragment>\n);\n\nconst Buttons = ({ _id, type, eventHandler }) => (\n    type === 'ideas' || type === 'done' ?\n        <IdeaAndDoneNote _id={ _id } type={ type } eventHandler={ eventHandler } /> :\n        <ToDoAndInProgressNote _id={ _id } eventHandler={ eventHandler } />\n);\n\nconst Note = ({ _id, type, text, eventHandler }) => (\n    <Card>\n        <CardContent>\n            <TextField\n                id={ `textField${ _id ? _id : 'Add' }` }\n                multiline\n                rowsMax=\"4\"\n                variant=\"outlined\"\n                defaultValue={ text }\n            />\n        </CardContent>\n        <CardActions>\n            <Grid>\n                <Row>\n                    {\n                        _id ?\n                            <Buttons _id={ _id } type={ type } eventHandler={ eventHandler } /> :\n                            <AddIdea eventHandler={ eventHandler } />\n                    }\n                </Row>\n            </Grid>\n        </CardActions>\n    </Card>\n);\n\nIconBtn.propTypes = {\n    onMouseDown: PropTypes.func.isRequired,\n    icon: PropTypes.element.isRequired\n}\n\nAddIdea.propTypes = {\n    eventHandler: PropTypes.func.isRequired\n}\n\nIdeaAndDoneNote.propTypes = {\n    _id: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    eventHandler: PropTypes.func.isRequired\n}\n\nToDoAndInProgressNote.propTypes = {\n    _id: PropTypes.string.isRequired,\n    eventHandler: PropTypes.func.isRequired\n}\n\nButtons.propTypes = {\n    _id: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    eventHandler: PropTypes.func.isRequired\n}\n\nNote.propTypes = {\n    _id: PropTypes.string,\n    type: PropTypes.string,\n    text: PropTypes.string,\n    eventHandler: PropTypes.func.isRequired\n}\n\nNote.displayName = \"Note\";\n\nexport default Note;","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Note from './Note';\n\nconst Notes = ({ class_name, notes, eventHandler }) => (\n    <Fragment>\n        { class_name === 'ideas' && <Note eventHandler={ eventHandler } /> }\n        {\n            notes.filter(note => note.type === class_name).map(note => {\n                const { _id, type, text } = note;\n                return (\n                    <Note\n                        key={ _id }\n                        _id={ _id }\n                        type={ type }\n                        text={ text }\n                        eventHandler={ eventHandler }\n                    />\n                );\n            })\n        }\n    </Fragment>\n);\n\nNotes.propTypes = {\n    class_name: PropTypes.string.isRequired,\n    notes: PropTypes.array.isRequired,\n    eventHandler: PropTypes.func.isRequired\n}\n\nNotes.displayName = \"Notes\";\n\nexport default Notes;","import React from 'react';\nimport { Col } from 'react-flexbox-grid'\nimport { Container } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport Notes from './Notes';\n\nconst Board = ({ class_name, title, notes, eventHandler }) => (\n    <Col xs={ 12 } sm={ 6 } md={ 3 } className={ class_name }>\n        <h3>{ title }</h3>\n        <Container maxWidth=\"sm\">\n            {\n                <Notes\n                    class_name={ class_name }\n                    notes={ notes }\n                    eventHandler={ eventHandler }\n                />\n            }\n        </Container>\n    </Col>\n);\n\nBoard.propTypes = {\n    class_name: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    notes: PropTypes.array.isRequired,\n    eventHandler: PropTypes.func.isRequired\n}\n\nBoard.displayName = \"Board\";\n\nexport default Board;","import React, { Component } from 'react';\nimport { Grid, Row } from 'react-flexbox-grid';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { api_url } from './../../constants';\nimport Board from './Board';\n\nclass Boards extends Component {\n    state = { boards: [], notes: [] };\n\n    componentDidMount() {\n        this.getBoards();\n        this.getNotes();\n    }\n\n    getBoards = () => axios.get(`${ api_url }/boards`)\n        .then(resp => this.setState({ boards: resp.data.boards }))\n        .catch(error => console.log(error));\n\n    getNotes = () => axios.get(`${ api_url }/notes`)\n        .then(resp => this.setState({ notes: resp.data.notes }))\n        .catch(error => console.log(error));\n\n    postNote = text => axios.post(`${ api_url }/notes`, { text })\n        .then(() => this.getNotes())\n        .catch(error => console.log(error));\n\n    deleteNote = _id => axios.delete(`${ api_url }/notes/${ _id }`)\n        .then(() => this.getNotes())\n        .catch(error => console.log(error));\n\n    putTextNote = (_id, text) => axios.put(`${ api_url }/notes/text/${ _id }`, { text })\n        .then(() => this.getNotes())\n        .catch(error => console.log(error));\n    \n    putSkipNote = (_id, skip) => axios.put(`${ api_url }/notes/${ skip }/${ _id }`)\n        .then(() => this.getNotes())\n        .catch(error => console.log(error));\n\n    eventHandler = (event, _id) => {\n        switch (event) {\n            case 'clickAddIcon':\n                return this.clickAddIcon();\n            case 'clickDeleteIcon':\n                return this.clickDeleteIcon(_id);\n            case 'clickSkipPreviousIcon': case 'clickSkipNextIcon':\n                return this.clickSkipPreviousNextIcon(event, _id);\n            case 'clickSaveIcon':\n                return this.clickSaveIcon(_id);\n            default:\n                return;\n        }\n    }\n\n    clickAddIcon = () => {\n        const textField0 = document.querySelector('#textFieldAdd');\n        const text = textField0.value.trim();\n        if (!text) return textField0.value = '';\n        textField0.value = '';\n        this.postNote(text);\n    }\n\n    clickDeleteIcon = _id => this.deleteNote(_id);\n\n    clickSkipPreviousNextIcon = (event, _id) => {\n        const skip = event === 'clickSkipPreviousIcon' ? 'previous' : 'next';\n        this.putSkipNote(_id, skip);\n    }\n\n    clickSaveIcon = _id => {\n        const textField = document.querySelector(`#textField${ _id }`);\n        const text = textField.value.trim();\n        if (!text) return textField.value = '';\n        this.putTextNote(_id, text);\n    }\n\n    render() {\n        const { boards, notes } = this.state;\n        return (\n            <Grid>\n                <Row>\n                    {\n                        boards.map(board => {\n                            const { _id, class_name, title } = board;\n                            return (\n                                <Board\n                                    key={ _id }\n                                    class_name={ class_name }\n                                    title={ title }\n                                    notes={ notes }\n                                    eventHandler={ this.eventHandler }\n                                />\n                            );\n                        })\n                    }\n                </Row>\n            </Grid>\n        );\n    }\n}\n\nBoards.propTypes = {\n    boards: PropTypes.array,\n    notes: PropTypes.array\n}\n\nBoards.displayName = \"Boards\";\n\nexport default Boards;","import React, { Fragment } from 'react';\nimport Header from './components/Header';\nimport Boards from './components/Boards';\n\nconst App = () => (\n    <Fragment>\n      \t<Header />\n      \t<Boards />\n    </Fragment>\n);\n\nApp.displayName = \"App\";\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/css/styles.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}